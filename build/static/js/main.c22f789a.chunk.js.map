{"version":3,"sources":["jwt/_helpers/AuthHeader.js","jwt/_helpers/FakeBackend.js","jwt/_helpers/HandleResponse.js","jwt/_helpers/History.js","jwt/_services/Authentication.service.js","views/spinner/Spinner.js","index.js"],"names":["AuthHeader","currentUser","AuthenticationService","currentUserValue","token","Authorization","ConfigureFakeBackend","users","id","username","password","firstName","lastName","realFetch","window","fetch","url","opts","isLoggedIn","headers","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","user","find","x","ok","message","status","text","stringify","then","response","HandleResponse","data","indexOf","logout","location","reload","error","statusText","History","createBrowserHistory","basename","currentUserSubject","BehaviorSubject","localStorage","getItem","login","requestOptions","setItem","next","removeItem","asObservable","value","Spinner","className","App","lazy","ReactDOM","render","fallback","document","getElementById"],"mappings":"8PAEO,SAASA,IAEd,MAAMC,EAAcC,IAAsBC,iBAC1C,OAAIF,GAAeA,EAAYG,MACtB,CAAEC,cAAc,UAAD,OAAYJ,EAAYG,QAEvC,GCRJ,SAASE,IACd,IAAIC,EAAQ,CACV,CACEC,GAAI,EACJC,SAAU,OACVC,SAAU,OACVC,UAAW,OACXC,SAAU,SAGVC,EAAYC,OAAOC,MACvBD,OAAOC,MAAQ,SAAUC,EAAKC,GAC5B,MAAMC,EAC8B,0BAAlCD,EAAKE,QAAL,cAEF,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAE3BC,WAAW,KAET,GAAIP,EAAIQ,SAAS,wBAA0C,SAAhBP,EAAKQ,OAAmB,CACjE,MAAMC,EAASC,KAAKC,MAAMX,EAAKY,MACzBC,EAAOvB,EAAMwB,KAChBC,GACCA,EAAEvB,WAAaiB,EAAOjB,UAAYuB,EAAEtB,WAAagB,EAAOhB,UAE5D,OAAKoB,EACEG,EAAG,CACRzB,GAAIsB,EAAKtB,GACTC,SAAUqB,EAAKrB,SACfE,UAAWmB,EAAKnB,UAChBC,SAAUkB,EAAKlB,SACfR,MAAO,oBA8BI8B,EApCW,yCAqCxBb,EAAQ,CACNc,OAAQ,IACRC,KAAM,IAAMhB,QAAQC,QAAQM,KAAKU,UAAU,CAAEH,gBAHjD,IAAeA,EAzBf,GAAIlB,EAAIQ,SAAS,WAA6B,QAAhBP,EAAKQ,OACjC,OAAKP,EACEe,EAAG1B,QAgBVc,EAAQ,CACNc,OAAQ,IACRC,KAAM,IACJhB,QAAQC,QAAQM,KAAKU,UAAU,CAAEH,QAAS,oBAXhD,SAASD,EAAGJ,GACVR,EAAQ,CACNY,IAAI,EACJG,KAAM,IAAMhB,QAAQC,QAAQM,KAAKU,UAAUR,MAP/ChB,EAAUG,EAAKC,GAAMqB,KAAMC,GAAalB,EAAQkB,KAyB/C,QCjEF,SAASC,EAAeD,GAC7B,OAAOA,EAASH,OAAOE,KAAMF,IAC3B,MAAMK,EAAOL,GAAQT,KAAKC,MAAMQ,GAChC,IAAKG,EAASN,GAAI,EAC6B,IAAzC,CAAC,IAAK,KAAKS,QAAQH,EAASJ,UAE9BjC,IAAsByC,SACtB7B,OAAO8B,SAASC,QAAO,IAGzB,MAAMC,EAASL,GAAQA,EAAKP,SAAYK,EAASQ,WACjD,OAAO3B,QAAQE,OAAOwB,GAGxB,OAAOL,I,WCdJ,MAAMO,EAAUC,YAAqB,CAACC,SAAU,O,mFCEvD,MAAMC,EAAqB,IAAIC,IAC7BzB,KAAKC,MAAMyB,aAAaC,QAAQ,iBAGrBpD,EAAwB,CACnCqD,MAQF,SAAe9C,EAAUC,GACvB,MAAM8C,EAAiB,CACrB/B,OAAQ,OACRN,QAAS,CAAE,eAAgB,oBAC3BU,KAAMF,KAAKU,UAAU,CAAE5B,WAAUC,cAGnC,OAAOK,MAAM,sBAAuByC,GACjClB,KAAKE,KACLF,KAAMR,IAELuB,aAAaI,QAAQ,cAAe9B,KAAKU,UAAUP,IACnDqB,EAAmBO,KAAK5B,GAEjBA,KArBXa,OAyBF,WAEEU,aAAaM,WAAW,eACxBR,EAAmBO,KAAK,OA3BxBzD,YAAakD,EAAmBS,eAChC,uBACE,OAAOT,EAAmBU,S,gCCb9B,0BAaeC,IAXC,IAEZ,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,wB,8DCRvB,iEAOAzD,cACA,MAAM0D,EAAMC,eACV,IACE,IAAI7C,QAASC,IACXE,WAAW,IAAMF,EAAQ,oDAAkB,MAIjD6C,IAASC,OACP,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAACJ,EAAD,OAEFK,SAASC,eAAe,U","file":"static/js/main.c22f789a.chunk.js","sourcesContent":["import { AuthenticationService } from \"../_services\";\r\n\r\nexport function AuthHeader() {\r\n  // return authorization header with jwt token\r\n  const currentUser = AuthenticationService.currentUserValue;\r\n  if (currentUser && currentUser.token) {\r\n    return { Authorization: `Bearer ${currentUser.token}` };\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n","export function ConfigureFakeBackend() {\r\n  let users = [\r\n    {\r\n      id: 1,\r\n      username: \"test\",\r\n      password: \"test\",\r\n      firstName: \"Test\",\r\n      lastName: \"User\",\r\n    },\r\n  ];\r\n  let realFetch = window.fetch;\r\n  window.fetch = function (url, opts) {\r\n    const isLoggedIn =\r\n      opts.headers[\"Authorization\"] === \"Bearer fake-jwt-token\";\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // wrap in timeout to simulate server api call\r\n      setTimeout(() => {\r\n        // authenticate - public\r\n        if (url.endsWith(\"/users/authenticate\") && opts.method === \"POST\") {\r\n          const params = JSON.parse(opts.body);\r\n          const user = users.find(\r\n            (x) =>\r\n              x.username === params.username && x.password === params.password\r\n          );\r\n          if (!user) return error(\"Username or password is incorrect\");\r\n          return ok({\r\n            id: user.id,\r\n            username: user.username,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            token: \"fake-jwt-token\",\r\n          });\r\n        }\r\n\r\n        // get users - secure\r\n        if (url.endsWith(\"/users\") && opts.method === \"GET\") {\r\n          if (!isLoggedIn) return unauthorised();\r\n          return ok(users);\r\n        }\r\n\r\n        // pass through any requests not handled above\r\n        realFetch(url, opts).then((response) => resolve(response));\r\n\r\n        // private helper functions\r\n\r\n        function ok(body) {\r\n          resolve({\r\n            ok: true,\r\n            text: () => Promise.resolve(JSON.stringify(body)),\r\n          });\r\n        }\r\n\r\n        function unauthorised() {\r\n          resolve({\r\n            status: 401,\r\n            text: () =>\r\n              Promise.resolve(JSON.stringify({ message: \"Unauthorised\" })),\r\n          });\r\n        }\r\n\r\n        function error(message) {\r\n          resolve({\r\n            status: 400,\r\n            text: () => Promise.resolve(JSON.stringify({ message })),\r\n          });\r\n        }\r\n      }, 500);\r\n    });\r\n  };\r\n}\r\n","import { AuthenticationService } from \"../_services\";\r\n\r\nexport function HandleResponse(response) {\r\n  return response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n    if (!response.ok) {\r\n      if ([401, 403].indexOf(response.status) !== -1) {\r\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\r\n        AuthenticationService.logout();\r\n        window.location.reload(true);\r\n      }\r\n\r\n      const error = (data && data.message) || response.statusText;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return data;\r\n  });\r\n}\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport const History = createBrowserHistory({basename: '/'});\r\n","import { BehaviorSubject } from \"rxjs\";\r\n\r\nimport { HandleResponse } from \"../_helpers\";\r\n\r\nconst currentUserSubject = new BehaviorSubject(\r\n  JSON.parse(localStorage.getItem(\"currentUser\"))\r\n);\r\n\r\nexport const AuthenticationService = {\r\n  login,\r\n  logout,\r\n  currentUser: currentUserSubject.asObservable(),\r\n  get currentUserValue() {\r\n    return currentUserSubject.value;\r\n  },\r\n};\r\n\r\nfunction login(username, password) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ username, password }),\r\n  };\r\n\r\n  return fetch(`/users/authenticate`, requestOptions)\r\n    .then(HandleResponse)\r\n    .then((user) => {\r\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n      localStorage.setItem(\"currentUser\", JSON.stringify(user));\r\n      currentUserSubject.next(user);\r\n\r\n      return user;\r\n    });\r\n}\r\n\r\nfunction logout() {\r\n  // remove user from local storage to log user out\r\n  localStorage.removeItem(\"currentUser\");\r\n  currentUserSubject.next(null);\r\n}\r\n","import React from \"react\";\r\nimport \"./Spinner.scss\";\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"fallback-spinner\">\r\n      <div className=\"loading component-loader\">\r\n        <div className=\"effect-1 effects\"></div>\r\n        <div className=\"effect-2 effects\"></div>\r\n        <div className=\"effect-3 effects\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Spinner;\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/scss/style.scss\";\r\nimport Spinner from \"./views/spinner/Spinner\";\r\n\r\n// setup fake backend\r\nimport { ConfigureFakeBackend } from \"./jwt/_helpers\";\r\nConfigureFakeBackend();\r\nconst App = lazy(\r\n  () =>\r\n    new Promise((resolve) => {\r\n      setTimeout(() => resolve(import(\"./app\")), 0);\r\n    })\r\n);\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<Spinner />}>\r\n    <App />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}